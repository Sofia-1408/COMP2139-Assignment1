// <auto-generated />
using System;
using COMP2139_Assignment1.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace COMP2139_Assignment1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251013024433_RebuildMigrations")]
    partial class RebuildMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("COMP2139_Assignment1.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "Concerts and live music events.",
                            Name = "Music"
                        },
                        new
                        {
                            CategoryId = 2,
                            Description = "Sports games and tournaments.",
                            Name = "Sports"
                        },
                        new
                        {
                            CategoryId = 3,
                            Description = "Plays and live performances.",
                            Name = "Theatre"
                        });
                });

            modelBuilder.Entity("COMP2139_Assignment1.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventId"));

                    b.Property<int>("AvailableTickets")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("TicketPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EventId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            AvailableTickets = 250,
                            CategoryId = 1,
                            Date = new DateTime(2025, 8, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            TicketPrice = 75.0,
                            Title = "Summer Beats Festival"
                        },
                        new
                        {
                            EventId = 2,
                            AvailableTickets = 500,
                            CategoryId = 2,
                            Date = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            TicketPrice = 30.0,
                            Title = "City Marathon 2025"
                        },
                        new
                        {
                            EventId = 3,
                            AvailableTickets = 150,
                            CategoryId = 3,
                            Date = new DateTime(2025, 7, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            TicketPrice = 40.0,
                            Title = "Shakespeare in the Park"
                        });
                });

            modelBuilder.Entity("COMP2139_Assignment1.Models.Purchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PurchaseId"));

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("GuestContactInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("TotalCost")
                        .HasColumnType("double precision");

                    b.HasKey("PurchaseId");

                    b.HasIndex("EventId");

                    b.ToTable("Purchases");

                    b.HasData(
                        new
                        {
                            PurchaseId = 1,
                            EventId = 1,
                            GuestContactInfo = "Name: Alice Johnson, Email: alice@example.com",
                            PurchaseDate = new DateTime(2025, 6, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            TotalCost = 150.0
                        },
                        new
                        {
                            PurchaseId = 2,
                            EventId = 2,
                            GuestContactInfo = "Name: Bob Smith, Email: bob.example.com",
                            PurchaseDate = new DateTime(2025, 6, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            TotalCost = 60.0
                        },
                        new
                        {
                            PurchaseId = 3,
                            EventId = 3,
                            GuestContactInfo = "Name: Carol Lee, Email: carol.example.com",
                            PurchaseDate = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            TotalCost = 80.0
                        });
                });

            modelBuilder.Entity("COMP2139_Assignment1.Models.Event", b =>
                {
                    b.HasOne("COMP2139_Assignment1.Models.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("COMP2139_Assignment1.Models.Purchase", b =>
                {
                    b.HasOne("COMP2139_Assignment1.Models.Event", "Event")
                        .WithMany("Purchases")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("COMP2139_Assignment1.Models.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("COMP2139_Assignment1.Models.Event", b =>
                {
                    b.Navigation("Purchases");
                });
#pragma warning restore 612, 618
        }
    }
}
